version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: '${CIRCLE_WORKFLOW_ID:0:7}'
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
        default: '${CIRCLE_WORKFLOW_ID:0:7}'
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/E7Jtv9bWJM9W3xd9ZVoNPZ/migration_<<parameters.workflow_id>>)
            if(( $SUCCESS==1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi

  # revert-OldWorkflowID:
  #   description: Revert the OldWorkflowID
  #   steps:
  #     - run:
  #         name: Revert OldWorkflowID
  #         when: on_fail
  #         command: |
            # aws cloudformation deploy \
            #   --template-file .circleci/files/cloudfront.yml \
            #   --stack-name InitialStack \
            #   --parameter-overrides WorkflowID='361148821472' \
            #   --tags project=udapeople

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: # Restore from cache
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: # Restore from cache
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: # Restore from cache
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: # Restore from cache
          keys: [backend-build]
      - run:
          name: Run back-end test
          command: |
             cd backend
             npm install
             npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: # Restore from cache
          keys: [frontend-build]
      - run:
          name: Run back-end test
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: # Restore from cache
          keys: [backend-build]
      - run:
          name: Run back-end test
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical

  deploy-infrastructure:
    docker: # Docker image that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text) >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:  # Docker image that supports Ansible
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys: # Added ssh keys with fingerprint
         fingerprints: ["18:51:8d:00:b9:71:4d:3b:05:e7:74:53:53:6a:df:c3"]
      - attach_workspace: #attached workspace
            at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip aws-cli
      - run:
          name: Configure server
          command: |
            echo NODE_ENV=production > ~/project/backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ~/project/backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ~/project/backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ~/project/backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ~/project/backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ~/project/backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ~/project/backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ~/project/backend/.env
            cat ~/project/backend/.env
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install awscli -y
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl --insecure https://kvdb.io/E7Jtv9bWJM9W3xd9ZVoNPZ/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}
            fi
      - destroy-environment


  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y tar gzip awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install --silent
            npm run build 2>/dev/null
            workflow=${CIRCLE_WORKFLOW_ID:0:7}
            echo $workflow
            tar -czvf artifact-"$workflow".tar.gz dist 2>/dev/null
            ls -al
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations
      - destroy-environment


  deploy-backend:
    docker: # Docker image that supports Ansible
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys: # Added ssh keys with fingerprint
         fingerprints: ["18:51:8d:00:b9:71:4d:3b:05:e7:74:53:53:6a:df:c3"]
      - attach_workspace: #attached workspace
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip aws-cli nodejs npm curl
      - run:
          name: Deploy backend
          command: |
            cd ~/project/backend
            npm install --silent
            npm run build 2>/dev/null
            cd ..
            # Zip the directory
            tar -C backend -czvf ~/project/.circleci/ansible/roles/deploy/tasks/artifact.tar.gz . 2>/dev/null
            ls ~/project/.circleci/ansible/roles/deploy/tasks/ | grep artifact.tar.gz
            cd ~/project/.circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.10-alpine3.16 # Lightweight Docker image
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update aws-cli curl
      - attach_workspace: #attached workspace
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            # Fetch and prepare the BACKEND_IP env var
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"
            sleep 60
            if curl "${API_URL}" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
                return 0
            else
                return 1
            fi
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker: # Docker image that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "${OldWorkflowID}" >> ~/project/OldWorkflowID.txt
            cat ~/project/OldWorkflowID.txt
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - project/OldWorkflowID.txt
      - revert-migrations
      - destroy-environment


  cleanup:
    docker: # Docker image that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace: #attached workspace
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Remove old stacks and files
          command: |
            if [ "${OldWorkflowID}" != "${CIRCLE_WORKFLOW_ID:0:7}" ]
            then
              aws s3 rb "s3://udapeople-${OldWorkflowID}" --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "no destroy"
            fi
      - revert-migrations
      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
